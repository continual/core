#
# Model endpoints
#

package io.continual.services.model.api.endpoints

#
#	Get the models mounted for this user.
#
GET		/v1/models      ModelApi.getModelListForAccount

#
#	Get an object by its path. If the path is not an object but is a container for other objects,
#	a listing is returned.
#
#	query params
#		incl=[data|rels|both], default is "both"
#
GET		/v1/model/{<.+>objPath}		ModelApi.getObject
GET		/v1/model					ModelApi.getObject		# to catch top-level request
GET		/v1/model/					ModelApi.getObject		# to catch top-level request

#
#	Overwrite an object's data. 
#
PUT		/v1/model/{<.+>objPath}		ModelApi.putObject

#
#   Update an object's data
#
PATCH	/v1/model/{<.+>objPath}		ModelApi.patchObject

#
#   Delete an object
#
DELETE	/v1/model/{<.+>objPath}		ModelApi.deleteObject


#######################################################################################################################
#
#	relationships
#

#
#	Create multiple relationships. The body is an object with an array named "relations". Each relation
#	entry is an object with an ID, from OID, name, and to OID.
#
#	query params
#		fail=[any|all], default is "all".	In fail=all, the response is 200 OK unless all relations fail,
#											and an errors array lists the failures. In fail=any, any failed
#											relation results in a failure status.
#
POST	/v1/relations				ModelApi.postRelations

#
#	Delete a relationship by ID
#
DELETE	/v1/relations/{relnId}		ModelApi.deleteRelation
